#!/usr/bin/env python

class Tester :

    # ranges = tuple()

    ranges

    regions = {}

    def __init__(self) :
        print("Tester class initiated")
        eighth = len(self.ranges)/8.
        print( "Testing : %f" %(eighth) )
        start = 0
        stop = eighth
        for i in range(0, 7) :
            stop += eighth
            print( "[%d] - Start: %d , Stop: %d" %(i, int(start), int(stop)) )
            start = stop + 1
            print( self.ranges[int(start):int(stop)] )
            # print( self.ranges[949:1084] )
        self.regions = {
            'right_section_1' : self.ranges[0:135],
            'right_section_2' : self.ranges[136:271],
            'right_section_3' : self.ranges[272:407],
            'right_section_4' : self.ranges[408:543],
            'left_section_1' : self.ranges[949:1084],
            'left_section_2' : self.ranges[814:949],
            'left_section_3' : self.ranges[679:814],
            'left_section_4' : self.ranges[544:679],
        }

    def check_laser_regions(self) :
        print("right_section_1: %d" %(len(self.regions['right_section_1'])))
        print("right_section_2: %d" %(len(self.regions['right_section_2'])))
        print("right_section_3: %d" %(len(self.regions['right_section_3'])))
        print("right_section_4: %d" %(len(self.regions['right_section_4'])))
        print("left_section_1: %d" %(len(self.regions['left_section_1'])))
        print("left_section_2: %d" %(len(self.regions['left_section_2'])))
        print("left_section_3: %d" %(len(self.regions['left_section_3'])))
        print("left_section_4: %d" %(len(self.regions['left_section_4'])))
        
        total =  len(self.regions['right_section_1']) + len(self.regions['right_section_2']) + len(self.regions['right_section_3']) + len(self.regions['right_section_4']) + len(self.regions['left_section_1']) + len(self.regions['left_section_2']) + len(self.regions['left_section_3']) + len(self.regions['left_section_4'])

        print("TOTAL: %f " %(total))


tester = Tester()
tester.check_laser_regions()
