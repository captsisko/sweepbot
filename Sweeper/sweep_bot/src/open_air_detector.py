#!/usr/bin/env python

import rospy
import numpy as np
from sensor_msgs.msg import LaserScan

class Air :

    # arr = tuple()
    # scans = 0
    # regions = {}
    
    def __init__(self) :
        print("Angles class initiated")

        rospy.Subscriber('/scans', LaserScan, self.callbackScans)

        # self.arr = 
        self.regions = ()
        self.scans = tuple()

        # self.arr = (26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 5.342817306518555, 5.099597454071045, 4.870239734649658, 4.665701866149902, 4.493592739105225, 4.286108016967773, 4.134091377258301, 3.9925856590270996, 3.8570005893707275, 3.739461660385132, 3.589160203933716, 3.4948790073394775, 3.3917977809906006, 3.286010265350342, 3.2058982849121094, 3.095500946044922, 3.0155208110809326, 2.9205868244171143, 2.84657883644104, 2.790940284729004, 2.7183849811553955, 2.6609034538269043, 2.575460910797119, 2.5441067218780518, 2.4554288387298584, 2.421386241912842, 2.3811516761779785, 2.3047685623168945, 2.2502613067626953, 2.2513976097106934, 2.196479082107544, 2.1470954418182373, 2.108001708984375, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 2.0903971195220947, 2.0128371715545654, 2.0052757263183594, 1.9745160341262817, 1.9240118265151978, 1.9301955699920654, 1.8690687417984009, 1.8336148262023926, 1.7921359539031982, 1.7784475088119507, 1.7578117847442627, 1.7337977886199951, 1.681673288345337, 1.6758370399475098, 1.6538697481155396, 1.6374026536941528, 1.60044527053833, 1.5944576263427734, 1.5723005533218384, 1.5432804822921753, 1.5298967361450195, 1.5131667852401733, 1.4944714307785034, 1.4728878736495972, 1.4306976795196533, 1.44281005859375, 1.411801815032959, 1.4161378145217896, 1.3778339624404907, 1.3679372072219849, 1.3359119892120361, 1.3226351737976074, 1.3158040046691895, 1.3297473192214966, 1.3072506189346313, 1.2654526233673096, 1.2525403499603271, 1.2467495203018188, 1.2508176565170288, 1.224694013595581, 1.199312448501587, 1.2072646617889404, 1.189430832862854, 1.1785931587219238, 1.1730496883392334, 1.1732172966003418, 1.1471545696258545, 1.1235889196395874, 1.1354619264602661, 1.1017746925354004, 1.108168363571167, 1.0828877687454224, 1.1022869348526, 26.0, 1.0591586828231812, 1.056965708732605, 1.0736624002456665, 1.0452378988265991, 1.0379539728164673, 1.037592887878418, 1.0349534749984741, 0.9996647834777832, 1.0030103921890259, 0.9877508282661438, 0.997482180595398, 0.9874393343925476, 0.9757182598114014, 0.9727098345756531, 0.969205379486084, 0.965915858745575, 0.9444760680198669, 0.9355985522270203, 0.9364833831787109, 0.9577821493148804, 0.9227880835533142, 0.9060766696929932, 0.9165663123130798, 0.9058413505554199, 0.91090989112854, 0.9080395102500916, 0.8887534737586975, 0.8908459544181824, 0.883450448513031)
        # self.arr = (0.886091411113739, 26.0, 0.8820672631263733, 0.8699256777763367, 0.8702948689460754, 0.8681122064590454, 0.8585352897644043, 0.8481968641281128, 0.8448644876480103, 0.8461490869522095, 0.8139756321907043, 0.8333187699317932, 0.8317253589630127, 0.8199765682220459, 0.8095036149024963, 0.8141867518424988, 0.8235312104225159, 0.8001902103424072, 0.8034918308258057, 0.784758448600769, 0.8073534965515137, 0.7978078722953796, 0.7931686043739319, 0.7808945178985596, 0.773470401763916, 0.7750387191772461, 0.7634991407394409, 0.7808852791786194, 0.7952740788459778, 0.7602686285972595, 0.7671458721160889, 0.7566651105880737, 26.0, 0.7654482126235962, 0.7478303909301758, 0.7584279775619507, 0.7416117191314697, 0.7472078204154968, 0.734624445438385, 0.7297364473342896, 0.7528107762336731, 0.7253609895706177, 0.7334797978401184, 0.7202192544937134, 0.7286216020584106, 0.724020779132843, 0.7203221917152405, 26.0, 0.7169994115829468, 0.7111027836799622, 0.6924856305122375, 0.6995210647583008, 0.7208801507949829, 0.7132611274719238, 0.7055725455284119, 0.6989448666572571, 0.708109438419342, 0.689872682094574, 26.0, 0.7102669477462769, 0.6857690811157227, 0.6889923214912415, 0.684379518032074, 0.691369891166687, 0.6788498759269714, 0.6889457106590271, 0.717829167842865, 0.679685115814209, 0.7017781734466553, 0.6816678047180176, 0.6632041931152344, 0.68864506483078, 0.6851752996444702, 0.6821749210357666, 0.6767780184745789, 0.6749165654182434, 0.6605919599533081, 0.6746635437011719, 0.6623401641845703, 0.6537398099899292, 0.6648572087287903, 26.0, 26.0, 26.0, 26.0, 26.0, 0.6424175500869751, 0.6629974842071533, 0.659149706363678, 26.0, 0.6519438028335571, 0.6503285765647888, 0.6419959664344788, 0.6400398015975952, 26.0, 26.0, 0.6566196084022522, 26.0, 0.6473267674446106, 0.6582191586494446, 0.638278067111969, 0.640932559967041, 0.6395382881164551, 0.6522975564002991, 0.6241337656974792, 0.6537762880325317, 0.6417301297187805, 0.6518324613571167, 0.6472857594490051, 0.6431137919425964, 0.6391685009002686, 26.0, 0.64741450548172, 0.6454567313194275, 0.6368289589881897, 0.6257140636444092, 26.0, 0.6399277448654175, 0.6372941732406616, 0.6276013851165771, 0.627109944820404, 0.6227989792823792, 26.0, 0.6367068290710449, 26.0, 0.6499318480491638, 0.6349450945854187, 0.6279059052467346, 0.6256306171417236, 26.0, 0.6296563148498535, 26.0, 0.6346256732940674, 26.0, 0.652649462223053, 0.6342612504959106, 0.6346678137779236, 0.6325773000717163, 26.0, 26.0)
        # self.arr = (1.0495725870132446, 1.042507290840149, 1.0424447059631348, 1.048473834991455, 1.0434892177581787, 1.0396249294281006, 1.0382429361343384, 1.0504130125045776, 1.0455595254898071, 1.0396379232406616, 1.050123691558838, 1.0460530519485474, 1.047078013420105, 1.0479328632354736, 1.044944167137146, 1.044525146484375, 1.0521353483200073, 1.0592784881591797, 1.0603969097137451, 1.0478990077972412, 1.050318956375122, 1.0549548864364624, 1.0612081289291382, 1.0624793767929077, 1.0455454587936401, 1.0590299367904663, 1.0538032054901123, 1.063862681388855, 1.0613257884979248, 1.065034031867981, 1.0656051635742188, 1.0634478330612183, 1.0569759607315063, 1.076367735862732, 1.0785722732543945, 1.0712761878967285, 1.0860627889633179, 1.0763859748840332, 1.0756914615631104, 1.081434726715088, 1.0717575550079346, 1.0774548053741455, 1.0738474130630493, 1.0927749872207642, 1.089108943939209, 1.103635549545288, 1.0850422382354736, 1.095900535583496, 1.0948081016540527, 1.1047732830047607, 1.0908982753753662, 1.1043095588684082, 1.1052452325820923, 1.092810869216919, 1.0965807437896729, 1.106537938117981, 1.1058098077774048, 1.114627718925476, 1.1129220724105835, 1.1238634586334229, 1.1192176342010498, 1.126763939857483, 1.1232777833938599, 1.1286695003509521, 1.122887134552002, 1.1355127096176147, 1.1379543542861938, 1.1367018222808838, 1.1582235097885132, 1.1479228734970093, 1.1463303565979004, 1.151999592781067, 1.1580897569656372, 1.1669882535934448, 1.1636494398117065, 1.1706911325454712, 1.1620696783065796, 1.1758514642715454, 1.1829555034637451, 1.1776173114776611, 1.1961256265640259, 1.1877515316009521, 1.1876109838485718, 1.1912670135498047, 1.2037551403045654, 1.210992693901062, 1.2022767066955566, 1.210326910018921, 1.2260440587997437, 1.2142709493637085, 1.2300198078155518, 1.2318013906478882, 1.238700032234192, 1.2324961423873901, 1.2364609241485596, 1.2544831037521362, 1.2505944967269897, 1.2465941905975342, 1.2629843950271606, 1.262176275253296, 1.2868160009384155, 1.2775579690933228, 1.2799724340438843, 1.294114112854004, 1.29753577709198, 1.2983715534210205, 1.2965571880340576, 1.3181735277175903, 1.3259307146072388, 1.3218286037445068, 1.3180642127990723, 26.0, 1.34287428855896, 1.3391108512878418, 1.36370849609375, 1.366753339767456, 1.3681836128234863, 1.3676074743270874, 1.3828716278076172, 1.3855082988739014, 1.4002618789672852, 1.3911268711090088, 1.411346197128296, 1.4121437072753906, 1.4231510162353516, 1.4291679859161377, 26.0, 1.4537783861160278, 1.4619574546813965, 1.4695172309875488, 1.4715936183929443, 1.4760065078735352, 1.4953361749649048, 1.5044865608215332, 1.5133171081542969)
        rospy.loginfo('Exiting INIT!')

    def getOpenAir(self, freeSpace) :
        rospy.loginfo('Testing: %s', freeSpace)

        sequence = {}
        start = -1
        hit = -1
        lasthit = -1

        for index, value in enumerate(self.arr) :
            if value == 26.0 :
                if start == -1 :
                    start = index 
                    lasthit = index
                    hit = 0
                if start == lasthit :
                    print("comparing %d to %d @ index: %d. HiTs: %i" %(start, lasthit, index, hit))
                    hit+=1
                else :
                    sequence['Hit_'+str(start)] = "Started @ " + str(start) + ", ended @ " + str(lasthit)
                    print("Testing")
                    start = -1
                    lasthit = -1
            else :
                lasthit = index
        print(sequence)

    def matching(self) :
        dyna_tuple = tuple(np.repeat( float(26.0), 5))
        sect_tuple = self.arr[0:5]

        rospy.loginfo( dyna_tuple == sect_tuple )
        rospy.loginfo( self.arr.index( sect_tuple ) )

        if dyna_tuple == sect_tuple :
            rospy.loginfo("MATCHED")
            rospy.loginfo("Dynanic tuple: %s", dyna_tuple)
            rospy.loginfo("Section of tuple: %s", sect_tuple)
        else :
            rospy.logerr('No match found')

    def callbackScans(self, msg) :
        rospy.loginfo('Callback respondin #1')
        print('Callback respondin #2')
        rospy.loginfo('From callback: %s', msg)
        self.scans = msg.ranges
        self.regions = {
            'starboard_aft' : self.scans[0:135],
            'starboard_abeam_aft' : self.scans[136:271],
            'starboard_abeam_bow' : self.scans[272:407],
            'starboard_bow' : self.scans[408:543],
            'port_aft' : self.scans[949:1084],
            'port_abeam_aft' : self.scans[814:949],
            'port_abeam_bow' : self.scans[679:814],
            'port_bow' : self.scans[544:679],
        }
    
    def matchingToo(self, index=0) :
        # 'port_aft' : self.scans[949:1084],
        # 'port_abeam_aft' : self.scans[814:949],
        # 'port_abeam_bow' : self.scans[679:814],
        # 'port_bow' : self.scans[544:679],

        rospy.loginfo('Regions: %s', self.regions)
        rospy.loginfo('Scans: %s', self.scans)
        exit()

        # self.arr = self.regions['port_bow']

        match_index = self.arr.index(26.0, index)

        while match_index < len(self.arr)-1 :

            rospy.loginfo("Length: %s", len(self.arr))

            i = 0
            count = 5
            found = []
            while i < count :
                rospy.loginfo('Checking [%s]...: %s', match_index + i, self.arr[match_index + i])
                if self.arr[match_index + i] == 26.0 :
                    found.append(True)
                else :
                    found.append(False)
                i += 1

            if found.count(True) == 5 and False not in found :
                rospy.loginfo('Found open-air begining at index: %s', match_index)
                rospy.logwarn("Sequence found!")
                break
            else :
                rospy.logerr("No sequence found!")
                match_index += 5

# if __name__ == "__main__" :
#     rospy.init_node('Angles')
#     air = Air()
#     rate = rospy.Rate(10) # Fixed update frequency of 10hz

#     rospy.Subscriber('/scans', LaserScan, air.callbackScans)

#     try :
#         # air.getOpenAir(5)
#         # air.matching()
#         air.matchingToo()
#     except rospy.ROSInterruptException:
#         pass

if __name__ == "__main__":
    rospy.init_node('Angles')
    air = Air()

    rate = rospy.Rate(10) # Fixed update frequency of 10hz

    # arguments from cmd
    # if "debug" in str(sys.argv) :
    #     tasker.debugMode = True

    while not rospy.is_shutdown() :
        air.matchingToo()

        rate.sleep()
        